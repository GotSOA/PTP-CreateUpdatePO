<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:context="http://www.springframework.org/schema/context" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:https="http://www.mulesoft.org/schema/mule/https" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="EE-3.5.0" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd">
    
	<!-- global exception strategy -->
	<catch-exception-strategy name="global-main-exception-strategy">
		<custom-processor class="com.bhnetwork.integration.msgprocessors.ErrorMessageMap" doc:name="Set Error Message Map in session"/>
        <logger message="Message to DLQ! cause / message: #[exception.cause] / #[exception.cause.message]" level="ERROR" doc:name="Logger - DLQ"/>
        <vm:outbound-endpoint exchange-pattern="one-way" path="Q.Dlq" doc:name="VM-dlq"/>
    </catch-exception-strategy> 
    <smtp:gmail-connector name="smtpGmailConnector" doc:name="Gmail"/>    
    <http:connector name="http_inbound" cookieSpec="netscape" validateConnections="true" sendBufferSize="0" receiveBufferSize="0" receiveBacklog="0" clientSoTimeout="10000" serverSoTimeout="10000" socketSoLinger="0" doc:name="HTTP-HTTPS" />
    <http:connector name="http_outbound" cookieSpec="netscape" validateConnections="true" sendBufferSize="0" receiveBufferSize="0" receiveBacklog="0" clientSoTimeout="10000" serverSoTimeout="10000" socketSoLinger="0" doc:name="HTTP-HTTPS" />
    <http:connector name="ntlmConnector" cookieSpec="netscape" validateConnections="true" sendBufferSize="0" receiveBufferSize="0" receiveBacklog="0" clientSoTimeout="10000" serverSoTimeout="10000" socketSoLinger="0" doc:name="HTTP-HTTPS">
        <service-overrides sessionHandler="org.mule.session.NullSessionHandler" outboundTransformer="com.mulesoft.support.CustomObjectToHttpClientMethodRequest" dispatcherFactory="org.mule.transport.http.NTLMv2HttpClientMessageDispatcherFactor" />
    </http:connector>
    
    <ws:consumer-config name="SnPor_Web_Service_Consumer" wsdlLocation="wsdl/snporequestservice_1.wsdl" service="SnPORequestService" port="BasicHttpBinding_SnPORequestService" serviceAddress="http://${dax.http.host}/${dax.http.snpor.path}" doc:name="SnPor Web Service Consumer" connector-ref="ntlmConnector" />

    <ws:consumer-config name="OrderType_Web_Service_Consumer" wsdlLocation="wsdl/porordertypeservice_1.wsdl" service="POROrderTypeService" port="BasicHttpBinding_POROrderTypeService" serviceAddress="http://${dax.http.host}/${dax.http.ordertype.path}" doc:name="OrderType Web Service Consumer" connector-ref="ntlmConnector" />

    <ws:consumer-config name="Dimension_Web_Service_Consumer" wsdlLocation="wsdl/dimensionsservice_1.wsdl" service="DimensionsService" port="BasicHttpBinding_DimensionsService" serviceAddress="http://${dax.http.host}/${dax.http.dimension.path}" doc:name="Web Service Consumer" connector-ref="ntlmConnector"/>
    
    <data-mapper:config name="List_Map__To_JSON" transformationGraphPath="list_map__to_json.grf" doc:name="List_Map__To_JSON"/>
    
    <data-mapper:config name="JSON_To_Xml_POROrderTypeServiceFindRequest_" transformationGraphPath="json_to_xml_porordertypeservicefindrequest_.grf" doc:name="JSON_To_Xml_POROrderTypeServiceFindRequest_" />
    <data-mapper:config name="Xml_POROrderTypeServiceFindResponse__To_JSON" transformationGraphPath="xml_porordertypeservicefindresponse__to_json.grf" doc:name="Xml_POROrderTypeServiceFindResponse__To_JSON" />
	
    <data-mapper:config name="JSON_To_Xml_DimensionsServiceFindRequest_" transformationGraphPath="json_to_xml_dimensionsservicefindrequest_.grf" doc:name="JSON_To_Xml_DimensionsServiceFindRequest_"/>
	<data-mapper:config name="Xml_DimensionsServiceFindResponse__To_JSON" transformationGraphPath="xml_dimensionsservicefindresponse__to_json.grf" doc:name="Xml_DimensionsServiceFindResponse__To_JSON"/>

    <data-mapper:config name="JSON_To_Xml_SnPORequestServiceCreateRequest_" transformationGraphPath="json_to_xml_snporequestservicecreaterequest_.grf" doc:name="JSON_To_Xml_SnPORequestServiceCreateRequest_"/>
    <data-mapper:config name="JSON_To_Xml_SnPORequestServiceReadRequest_" transformationGraphPath="json_to_xml_snporequestservicereadrequest_.grf" doc:name="JSON_To_Xml_SnPORequestServiceReadRequest_"/>
    <data-mapper:config name="Xml_SnPORequestServiceReadResponse__To_Xml_SnPORequestServiceUpdateRequest_" transformationGraphPath="xml_snporequestservicereadresponse__to_xml_snporequestserviceupdaterequest_.grf" doc:name="Xml_SnPORequestServiceReadResponse__To_Xml_SnPORequestServiceUpdateRequest_"/>

    <data-mapper:config name="Pojo_To_JSON" transformationGraphPath="pojo_to_json.grf" doc:name="Pojo_To_JSON"/>
    
	<context:property-placeholder location="ptp-createupdatepo.properties,${mule.env}-ptp-createupdatepo.properties" />

	<db:generic-config name="Generic_Database_Configuration" url="${dax.database.url};user=${dax.database.user};password=${dax.database.password}" driverClassName="net.sourceforge.jtds.jdbc.Driver" doc:name="Generic Database Configuration"/>
    
    <spring:beans>
        <spring:bean id="Bean" name="EmailBody" class="com.bhnetwork.integration.component.EmailBody" scope="prototype"  />
    </spring:beans>
    
    <apikit:config xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" name="ptp-createupdatepo-config" raml="ptp-createupdatepo.raml" consoleEnabled="true" consolePath="console" doc:name="Router"/>
    <apikit:mapping-exception-strategy xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" name="ptp-createupdatepo-apiKitGlobalExceptionMapping" doc:name="Mapping Exception Strategy">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <logger level="ERROR" message="#[groovy:message.getExceptionPayload().getMessage()]" doc:name="Logger"/>
            <scripting:component doc:name="Groovy">
            	<scripting:script name="error" engine="Groovy"><![CDATA[errorResponse = new java.util.LinkedHashMap(); errorResponse.put("message", "Bad Request"); errorResponse.put("detailed message",message.getExceptionPayload().getMessage()); return errorResponse;]]></scripting:script>
        	</scripting:component>
        	<json:object-to-json-transformer doc:name="Object to JSON"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
    
    <flow name="quartz-sync-metadata" doc:name="quartz-sync-metadata">
        <poll doc:name="Poll">
            <schedulers:cron-scheduler expression="${quartz.sync-dax-sn.cron}"/>
            <flow-ref name="sync-dax-sn" doc:name="sync dax-sn" />
        </poll>
        <set-payload value="{&quot;status&quot;:&quot;OK&quot;}" doc:name="Set OK"/>
        <logger message="Metadata Sync Successful" level="INFO" doc:name="Metadata Sync Successful"/>

        <exception-strategy ref="global-main-exception-strategy" doc:name="Reference Exception Strategy" />
    </flow>
    <sub-flow name="sync-dax-sn" doc:name="sync-dax-sn">
        <flow-ref name="sync-vendor" doc:name="sync vendor" />
        <flow-ref name="sync-ordertype" doc:name="sync ordertype" />  
        <flow-ref name="sync-dimension" doc:name="sync dimension" />
    </sub-flow>
    <sub-flow name="sync-vendor" doc:name="sync-vendor">
        <until-successful maxRetries="${maxRetries}" secondsBetweenRetries="${secondsBetweenRetries}" synchronous="true" doc:name="Until Successful">
            <processor-chain doc:name="Processor Chain">
                <db:select config-ref="Generic_Database_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[select AccountNum, Name, Blocked,  Address from VENDTABLE where VENDTABLE.VENDGROUP = 'TRADE']]></db:parameterized-query>
                </db:select>
                <data-mapper:transform config-ref="List_Map__To_JSON" doc:name="List&lt;Map&gt; To JSON"/>
            </processor-chain>
        </until-successful>
        <!-- Prototype concept for batch solution. Commented out as increasing the timeout solved the issue -->
        <!-- <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-payload value="#[payload.records]" doc:name="Set Payload"/>
        <batch:execute name="batch" doc:name="Batch Execute"/> -->
        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object" />
        <logger message="Vendor: Records to insert in SN #[(payload.records).size()]" level="INFO" doc:name="Records to insert in SN" />
        <json:object-to-json-transformer doc:name="Object to JSON" />
        <set-session-variable variableName="integrationStep" value="sn.post.vendor (IF7)" doc:name="integrationStep = sn.post.vendor"/> 
        <set-variable variableName="if7request" value="#[payload]" doc:name="if7request"/>
        <until-successful maxRetries="${maxRetries}" secondsBetweenRetries="${secondsBetweenRetries}" synchronous="true" doc:name="Until Successful">
            <processor-chain doc:name="Processor Chain">
                <set-payload value="#[flowVars.if7request]" doc:name="if7request (For replay)"/>
                <https:outbound-endpoint exchange-pattern="request-response" host="${http.sn.host}" port="${http.sn.port}" path="u_dax_vendor.do?JSON&amp;sysparm_action=insertMultiple" method="POST" user="${sn.user}" password="${sn.password}" doc:name="HTTP" contentType="application/json" responseTimeout="${responseTimeout}"/>
            </processor-chain>
        </until-successful>
        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object" />
        <logger message="Vendor: Records inserted in SN #[(payload.records).size()]" level="INFO" doc:name="Records inserted in SN" />
    </sub-flow>
    <!-- Batch solution to insert records is no more needed. Increasing the timeout does solves the problem -->
    <!-- <batch:job name="batch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="Batch_Step">
                <batch:commit size="500" doc:name="Batch Commit">
                    <json:object-to-json-transformer doc:name="Object to JSON"/>
                    <set-payload value="{&quot;records&quot;: #[payload]}" doc:name="Set Payload"/>
                    <logger message="RequestToSN #[payload]" level="INFO" doc:name="Logger"/>
                    <https:outbound-endpoint exchange-pattern="request-response" host="${http.sn.host}" port="${http.sn.port}" path="u_dax_vendor.do?JSON&amp;sysparm_action=insertMultiple" method="POST" user="${sn.user}" password="${sn.password}" doc:name="HTTP"/>
                </batch:commit>
            </batch:step>
        </batch:process-records>
    </batch:job> -->
    <sub-flow name="sync-ordertype" doc:name="sync-ordertype">
        <set-payload value="{&quot;DataSourceName&quot;:&quot;PurchPool&quot;,&quot;FieldName&quot;:&quot;PurchPoolId&quot;,&quot;Operator&quot;:&quot;NotEqual&quot;,&quot;Value1&quot;:&quot; &quot;}" doc:name="Query Parameters in JSON" />
        <data-mapper:transform config-ref="JSON_To_Xml_POROrderTypeServiceFindRequest_" doc:name="JSON To Xml&lt;POROrderTypeServiceFindRequest&gt;" />
        <expression-component doc:name="NTLM credentials"><![CDATA[flowVars['username']='${dax.username}'; flowVars['password']='${dax.password}'; flowVars['domain']='${dax.domain}'; flowVars['realm']='${dax.realm}' ;]]></expression-component>
        <set-session-variable variableName="integrationStep" value="dax.read.ordertype (IF8)" doc:name="integrationStep = dax.read.ordertype"/>
        <set-variable variableName="if8request" value="#[payload]" doc:name="if8request"/>
        <until-successful maxRetries="${maxRetries}" secondsBetweenRetries="${secondsBetweenRetries}" synchronous="true" doc:name="Until Successful">
            <processor-chain doc:name="Processor Chain">
                <set-payload value="#[flowVars.if8request]" doc:name="if8request (For replay)"/>
                <ws:consumer config-ref="OrderType_Web_Service_Consumer" operation="find" doc:name="OrderType Web Service Consumer"/>
            </processor-chain>
        </until-successful>
        <data-mapper:transform config-ref="Xml_POROrderTypeServiceFindResponse__To_JSON" doc:name="Xml&lt;POROrderTypeServiceFindResponse&gt; To JSON" />
        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object" />
        <logger message="OrderType: Records to insert in SN #[(payload.records).size()]" level="INFO" doc:name="Records to insert in SN" />
        <json:object-to-json-transformer doc:name="Object to JSON" />
        <set-session-variable variableName="integrationStep" value="sn.post.ordertype (IF9)" doc:name="integrationStep = sn.post.ordertype"/>
        <set-variable variableName="if9request" value="#[payload]" doc:name="if9request"/>
        <until-successful maxRetries="${maxRetries}" secondsBetweenRetries="${secondsBetweenRetries}" synchronous="true" doc:name="Until Successful">
            <processor-chain doc:name="Processor Chain">
                <set-payload value="#[flowVars.if9request]" doc:name="if9request (For replay)"/>
                <https:outbound-endpoint exchange-pattern="request-response" host="${http.sn.host}" port="${http.sn.port}" path="u_dax_order_type.do?JSON&amp;sysparm_action=insertMultiple" method="POST" user="${sn.user}" password="${sn.password}" doc:name="HTTP"/>
            </processor-chain>
        </until-successful>
        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object" />
        <logger message="OrderType: Records inserted in SN #[(payload.records).size()]" level="INFO" doc:name="Records inserted in SN" />
    </sub-flow>
    <sub-flow name="sync-dimension" doc:name="sync-dimension">
        <set-payload value="{&quot;DataSourceName&quot;:&quot;Dimension&quot;,&quot;FieldName&quot;:&quot;DimensionCode&quot;,&quot;Operator&quot;:&quot;Equal&quot;,&quot;Value1&quot;:&quot;ProjectId&quot;}" doc:name="Query Parameters in JSON"/>
        <data-mapper:transform config-ref="JSON_To_Xml_DimensionsServiceFindRequest_" doc:name="JSON To Xml&lt;DimensionsServiceFindRequest&gt;"/>

        <expression-component doc:name="NTLM credentials"><![CDATA[flowVars['username']='${dax.username}'; flowVars['password']='${dax.password}'; flowVars['domain']='${dax.domain}'; flowVars['realm']='${dax.realm}' ;]]></expression-component>
        <set-session-variable variableName="integrationStep" value="dax.read.dimensions (IF10)" doc:name="integrationStep = dax.read.dimensions"/>
        <set-variable variableName="if10request" value="#[payload]" doc:name="if10request"/>
        <until-successful maxRetries="${maxRetries}" secondsBetweenRetries="${secondsBetweenRetries}" synchronous="true" doc:name="Until Successful">
            <processor-chain doc:name="Processor Chain">
                <set-payload value="#[flowVars.if10request]" doc:name="if10request (For replay)"/>
                <ws:consumer config-ref="Dimension_Web_Service_Consumer" operation="find" doc:name="Dimension Web Service Consumer"/>
            </processor-chain>
        </until-successful>
        <data-mapper:transform config-ref="Xml_DimensionsServiceFindResponse__To_JSON" doc:name="Xml&lt;DimensionsServiceFindResponse&gt; To JSON"/>
        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object" />
        <logger message="Dimension: Records to insert in SN #[(payload.records).size()]" level="INFO" doc:name="Records to insert in SN" />
        <json:object-to-json-transformer doc:name="Object to JSON" />
        <set-session-variable variableName="integrationStep" value="sn.post.dimensions (IF11)" doc:name="integrationStep = sn.post.dimensions"/>
        <set-variable variableName="if11request" value="#[payload]" doc:name="if11request"/>
        <until-successful maxRetries="${maxRetries}" secondsBetweenRetries="${secondsBetweenRetries}" synchronous="true" doc:name="Until Successful">
            <processor-chain doc:name="Processor Chain">
                <set-payload value="#[flowVars.if11request]" doc:name="if11request (For replay)"/>
                <https:outbound-endpoint exchange-pattern="request-response" host="${http.sn.host}" port="${http.sn.port}" path="u_dax_project.do?JSON&amp;sysparm_action=insertMultiple" method="POST" user="${sn.user}" password="${sn.password}" doc:name="HTTP"/>
            </processor-chain>
        </until-successful>
        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object" />
        <logger message="Dimension: Records inserted in SN #[(payload.records).size()]" level="INFO" doc:name="Records inserted in SN" />
    </sub-flow>
    <flow name="ptp-createupdatepo-main" doc:name="ptp-createupdatepo-main">
        <http:inbound-endpoint connector-ref="http_inbound" address="http://${http.host}:${http.port}" doc:name="HTTP"/>
        <apikit:router xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" config-ref="ptp-createupdatepo-config" doc:name="APIkit Router"/>
        <exception-strategy ref="ptp-createupdatepo-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="post:/ptp-createupdatepo:ptp-createupdatepo-config" doc:name="post:/ptp-createupdatepo:ptp-createupdatepo-config">
        <async doc:name="Async">
			<logger message="IF1: Received #[json:u_request_type] PO REQUEST #[json:number] from SN" level="INFO" doc:name="IF1 (INFO)"/>
			<logger message="IF1: COMPLETE REQUEST #[payload] " level="DEBUG" doc:name="IF1 (DEBUG)"/>
            <flow-ref name="if2-flow" doc:name="IF2 Flow"/>
        </async>
        <set-payload value="{&quot;status&quot;:&quot;ACK&quot;}" doc:name="Send ACK"/>
    </flow>
    <flow name="if2-flow" doc:name="if2-flow">
        <data-mapper:transform config-ref="JSON_To_Xml_SnPORequestServiceCreateRequest_" doc:name="JSON To Xml&lt;SnPORequestServiceCreateRequest&gt;"/>
        <expression-component doc:name="NTLM credentials"><![CDATA[flowVars['username']='${dax.username}'; flowVars['password']='${dax.password}'; flowVars['domain']='${dax.domain}'; flowVars['realm']='${dax.realm}' ;]]></expression-component>
        <set-session-variable variableName="integrationStep" value="dax.insert.snpor (IF2)" doc:name="integrationStep = dax.insert.snpor"/>
        <set-variable variableName="if2request" value="#[payload]" doc:name="if2request"/>
        <until-successful maxRetries="${maxRetries}" secondsBetweenRetries="${secondsBetweenRetries}" synchronous="true" doc:name="Until Successful">
            <processor-chain doc:name="Processor Chain">
                <set-payload value="#[flowVars.if2request]" doc:name="if2request (for replay)"/>
                <ws:consumer config-ref="SnPor_Web_Service_Consumer" operation="create" doc:name="SnPor Create Web Service Consumer"/>
            </processor-chain>
        </until-successful>
        <logger message="IF2: PO NEW/UPDATE Successfull" level="INFO" doc:name="IF2 Completed"/>
        <exception-strategy ref="global-main-exception-strategy" doc:name="Reference Exception Strategy" />
    </flow>
    <flow name="if3-if4-if5-flow" doc:name="if3-if4-if5-flow">
        <http:inbound-endpoint connector-ref="http_inbound" exchange-pattern="request-response" host="${http.host}" port="${http.port}" path="PORDataSyncService" doc:name="HTTP">
        	<cxf:jaxws-service doc:name="CXF" serviceClass="com.bhnetwork.service.PORDataSyncService" validationEnabled="true"/>
        </http:inbound-endpoint>
        <component class="com.bhnetwork.service.PORDataSyncServiceImpl" doc:name="PORDataSyncService"/>
        <logger message="IF3: Received PO DataSync/Update from DAX" level="INFO" doc:name="IF3 (INFO)"/>
        <async doc:name="Async">
            <flow-ref name="if4-flow" doc:name="IF4"/>
            <flow-ref name="if5-flow" doc:name="IF5"/>
        </async>
        <exception-strategy ref="global-main-exception-strategy" doc:name="Reference Exception Strategy" />
    </flow>
    <sub-flow name="if4-flow" doc:name="if4-flow">
        <set-variable variableName="porId" value="#[payload.porDataSyncServiceRequest.porId]" doc:name="porId"/>
        <data-mapper:transform config-ref="Pojo_To_JSON" doc:name="Pojo To JSON"/>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <logger message="IF4: PO DataSync/Update with SN #[payload]" level="INFO" doc:name="if4request"/>
        <set-session-variable variableName="integrationStep" value="sn.update.snpor (IF4)" doc:name="integrationStep = sn.update.snpor"/>
        <set-variable variableName="if4updaterequest" value="#[payload]" doc:name="if4updaterequest"/>
        <until-successful maxRetries="${maxRetries}" secondsBetweenRetries="${secondsBetweenRetries}" synchronous="true" doc:name="Until Successful">
            <processor-chain doc:name="Processor Chain">
                <set-payload value="#[flowVars.if4updaterequest]" doc:name="if4updaterequest (For replay)"/>
                <https:outbound-endpoint exchange-pattern="request-response" host="${http.sn.host}" port="${http.sn.port}" path="u_bhn_ptp.do?JSON&amp;sysparm_query=number=#[flowVars.porId]&amp;sysparm_action=update" method="POST" user="${sn.user}" password="${sn.password}" doc:name="IF4 Update"/>
            </processor-chain>
        </until-successful>
    </sub-flow>
    <sub-flow name="if5-flow" doc:name="if5-flow">
        <json:json-to-object-transformer doc:name="JSON to Object"/>
		<logger message="IF4: PO DataSync/Update Response from SN state=#[json:records[0]/state]" level="INFO" doc:name="if4response (INFO)"/>
		<logger message="IF4: COMPLETE RESPONSE #[payload]" level="DEBUG" doc:name="if4response (DEBUG)"/>

        <data-mapper:transform config-ref="JSON_To_Xml_SnPORequestServiceReadRequest_" doc:name="JSON To Xml&lt;SnPORequestServiceReadRequest&gt;"/>
        <expression-component doc:name="NTLM credentials"><![CDATA[flowVars['username']='${dax.username}'; flowVars['password']='${dax.password}'; flowVars['domain']='${dax.domain}'; flowVars['realm']='${dax.realm}' ;]]></expression-component>
        <set-session-variable variableName="integrationStep" value="dax.read.snpor (IF5.1)" doc:name="integrationStep = dax.read.snpor"/>
        <set-variable variableName="if5readrequest" value="#[payload]" doc:name="if5readrequest"/>
        <until-successful maxRetries="${maxRetries}" secondsBetweenRetries="${secondsBetweenRetries}" synchronous="true" doc:name="Until Successful">
            <processor-chain doc:name="Processor Chain">
                <set-payload value="#[flowVars.if5readrequest]" doc:name="if5readrequest (For replay)"/>
                <ws:consumer config-ref="SnPor_Web_Service_Consumer" operation="read" doc:name="SnPor Read Web Service Consumer"/>
            </processor-chain>
        </until-successful>
        <data-mapper:transform config-ref="Xml_SnPORequestServiceReadResponse__To_Xml_SnPORequestServiceUpdateRequest_" doc:name="Xml&lt;SnPORequestServiceReadResponse&gt; To Xml&lt;SnPORequestServiceUpdateRequest&gt;">
            <data-mapper:input-arguments>

            </data-mapper:input-arguments>
        </data-mapper:transform>
        <set-session-variable variableName="integrationStep" value="dax.update.snpor (IF5.2)" doc:name="integrationStep = dax.update.snpor"/>
        <set-variable variableName="if5updaterequest" value="#[payload]" doc:name="if5updaterequest"/>
        <until-successful maxRetries="${maxRetries}" secondsBetweenRetries="${secondsBetweenRetries}" synchronous="true" doc:name="Until Successful">
            <processor-chain doc:name="Processor Chain">
                <set-payload value="#[flowVars.if5updaterequest]" doc:name="if5updaterequest (For replay)"/>
                <ws:consumer config-ref="SnPor_Web_Service_Consumer" operation="update" doc:name="SnPor Update Web Service Consumer"/>
            </processor-chain>
        </until-successful>
        <logger message="IF5 Completed" level="INFO" doc:name="IF5 Completed"/>
    </sub-flow>

    
    <flow name="DAX-DLQ-flow" doc:name="DAX-DLQ-flow">
        <vm:inbound-endpoint exchange-pattern="one-way" doc:name="VM-DLQ" path="Q.dlq" />
        <flow-ref name="notification-flow" doc:name="Notify Ops"/>
        <logger level="INFO" message="#[sessionVars['error']]" doc:name="Payload get DLQ'ed" />
    </flow>   
    <flow name="notification-flow" doc:name="notification-flow">
        <!-- <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="email" doc:name="HTTP"/>  -->
        <message-properties-transformer doc:name="toggle email forwarding on-off" overwrite="true" scope="invocation">
            <add-message-property key="sendEmail" value="${email.send}" />
        </message-properties-transformer>
        <choice doc:name="Choice Email Send or Not">
            <when expression="#[flowVars['sendEmail'] == true]">
            	<logger message="sending email notification out..." level="INFO" doc:name="Logger"/>
            	<!-- Todo: what do we want to write in the email body? -->
            	<component doc:name="EmailBody">
        			<spring-object bean="EmailBody"/>
        		</component>
		        <smtp:outbound-endpoint 
		        	connector-ref="smtpGmailConnector"
		        	to="${email.to}" 
		        	from="${email.from}" 
		        	subject="${email.subject}" 
		        	responseTimeout="${email.responseTimeout}" 
		        	host="${email.host}"
		        	port="${email.port}" 
		        	mimeType="${email.mimeType}" 
		        	user="${email.user}"
		        	password="${email.password}"
		        	doc:name="SMTP"/>
            </when>
            <otherwise>
               <logger message="Email notifications are disabled..." level="INFO" doc:name="Logger"/>
               <logger message="Email body written to log: #[payload]" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>		
        <exception-strategy ref="global-main-exception-strategy" doc:name="Reference Exception Strategy" />
    </flow>        
    
</mule>
